<% content_for(:html_head) do %>
<%= javascript_include_tag "cms/content_library", "cms/jquery.event.drag-2.0", "cms/slick.grid", "cms/slick.editors", "cms/slick.model", "cms/slick.pager", "cms/slick.columnpicker" %>
<%= stylesheet_link_tag "cms/slick.grid", "cms/slick.columnpicker", "cms/smoothness/jquery-ui-1.8.5.custom"  %>
  <% javascript_tag do %>
    jQuery(function($){
      
      var collectionName = '<%= content_type.model_class.name.underscore.pluralize %>';
      var options = {
  			editable: false,
  			enableAddRow: false,
  			enableCellNavigation: true,
  			secondaryHeaderRowHeight: 25,
  			forceFitColumns: true,
  			enableColumnReorder: false
  		};
  		
  		var dataView = new Slick.Data.DataView();
  		var data = <%= 
  		  data = @blocks.map do |block|
  		    content_type.data_for_block(block).merge({
  		      :editable => current_user.able_to_edit?(block),
            :publishable => current_user.able_to_publish?(block),
            :cannot_be_deleted_message => (block.respond_to?(:cannot_be_deleted_message) && block.cannot_be_deleted_message)? block.cannot_be_deleted_message : ""
  		    })
		    end
  		  data.to_json
  		%>
      var columns = <%= content_type.columns_for_index.map {|c| c[:field].to_s.gsub(".", "_") }.to_json %>;
  		
  		var sortcol = "id";
  		var sortdir = -1;
    	var grid = new Slick.Grid($(".slickgrid"), dataView.rows, columns, options);
    	var filter_conditions = {};
    	var type = "<%= content_type.class.to_s.downcase %>";
  		
  		function comparer(a,b) {
  			var x = a[sortcol], y = b[sortcol];
  			return sortdir * (x == y ? 0 : (x > y ? 1 : -1));
  		}
  		
    	
    	function filterBlocks(item) {
    	  var element_count = 0;
        for (e in filter_conditions) { element_count++; }
    	  if(element_count == 0)
    	    return true;
    	  
    	  for (i in filter_conditions) {
    	    if(("" + item[i]).toLowerCase().indexOf(filter_conditions[i].toLowerCase()) == -1)
    	      return false;
    	  }
      	return true;
    	}
			
			function refreshGrid() {
    		grid.invalidate();
        grid.render();
			}
    	
    	grid.onSort = function(sortCol, sortAsc) {
    		sortdir = sortAsc ? 1 : -1;
    		sortcol = sortCol.field;
    		dataView.sort(comparer);
    		refreshGrid()
    	};
    	
    	dataView.beginUpdate();
    	dataView.setItems(data);
    	dataView.setFilter(filterBlocks);
    	dataView.endUpdate();
    	grid.setSortColumn(sortcol,0)
    	dataView.sort(comparer);
    	grid.invalidate();
      grid.render();
      
      var columnResized = new EventHelper()
      grid.onColumnsResized = function() {
        columnResized.notify({})
      }
      
      var columnsReordered = new EventHelper()
      grid.onColumnsReordered = function() {
        columnsReordered.notify({})
      }
      
      

      function reposition_field_after_header($field, $header) {
        var offset_left = $header.position().left + $header.parent().position().left;
        $field.css({
          width: $header.width(),
          position: "absolute",
          left: (offset_left + 1) + "px",
          top: "1px"
        });
      }

      function create_free_filter_field($header_to_match) {
        var $field = $('<input type="text"></input>');
        reposition_field_after_header($field, $header_to_match);

        columnsReordered.subscribe(function(el, args) { reposition_field_after_header($field, $header_to_match); })
        columnResized.subscribe(function(el, args) { reposition_field_after_header($field, $header_to_match); });
        
        return $field;
      }

      function create_select_filter_field($header_to_match) {
        var $field = $('<select></select>');
        reposition_field_after_header($field, $header_to_match);
        
        columnsReordered.subscribe(function(el, args) { reposition_field_after_header($field, $header_to_match); })
        columnResized.subscribe(function(el, args) { reposition_field_after_header($field, $header_to_match); });
        
        return $field;
      }
      
      function reFilter() {
        dataView.refresh();
        refreshGrid();
      }
      
      
      var filter_timer;
      
      function setup_select_values_and_return($select, column) {
        var values = [];
        $.each(data, function(i, row) {
          if($.inArray(row[column.id], values) == -1) {
            values.push(row[column.id]);
          }
        });
        $select.append('<option value="any">Any</option>')
        $.each(values, function(i, value) {
          $select.append('<option value="' + value + '">'+ value +'</option>')
        });
        $select.change(function(){
          var value = $(this).val();
          if(value == "any")
            delete filter_conditions[column.field]
          else {
            filter_conditions[column.field] = value;
          }
          clearTimeout(filter_timer);
          filter_timer = setTimeout(reFilter, 200);
        })
      }
      
      function setup_free_return($input, column) {
        $input.keyup(function(){
          var value = $(this).val();
          if(value == "")
            delete filter_conditions[column.field]
          else
            filter_conditions[column.field] = value;
          clearTimeout(filter_timer);
          filter_timer = setTimeout(reFilter, 200);
        });
      }
      

      $(grid.getSecondaryHeaderRow()).css("position", "relative");
      $.each(columns, function(i, el) {
        var $columns = $(".slick-header-column");
        var $column = $($columns[grid.getColumnIndex(el.id)]);
        var $filter_input;
        if(el.filter){
          switch(el.filter) {
            case "select":
              $filter_input = create_select_filter_field($column);
              setup_select_values_and_return($filter_input, el)
            break;
            default: // FREE
              $filter_input = create_free_filter_field($column);
              setup_free_return($filter_input, el);
          }
        }
        $filter_input.appendTo(grid.getSecondaryHeaderRow());
      })

      $("#filter_button").click(function() {
        if ($(grid.getSecondaryHeaderRow()).is(":visible")){
            grid.hideSecondaryHeaderRow();
            $(this).removeClass("off");
        } else {
            grid.showSecondaryHeaderRow();
            $(this).addClass("off");
        }
      }).removeClass("disabled");
			
			grid.onClick = function(event, row_index, cell) {
			    var row = dataView.rows[row_index];
          var id = row.id;
          var editable = row.editable;
          var publishable = row.publishable;
                  $('#functions .button').addClass('disabled').attr('href','#')
                  
          
          $('#add_button').removeClass('disabled').attr('href', '/cms/'+collectionName+'/new')
          $('#view_button').removeClass('disabled').attr('href', '/cms/'+collectionName+'/'+id)
          $('#filter_button').removeClass('disabled')
            if (editable) $('#edit_button').removeClass('disabled').attr('href', '/cms/'+collectionName+'/'+id+'/edit')
            <% if content_type.model_class.versioned? %>
              $('#revisions_button').removeClass('disabled').attr('href', '/cms/'+collectionName+'/'+id+'/versions')
            <% else %>
              $('#revisions_button').addClass('disabled')
                .attr('title', '<%= content_type.display_name.pluralize.titleize %> are not versioned')          
            <% end %>
            var cannot_be_deleted_message = row.cannot_be_deleted_message
            if(cannot_be_deleted_message.length > 0) {
              $('#delete_button').addClass('disabled')
                .attr('title', $.trim(cannot_be_deleted_message.text()))
            } else {
              if (publishable) {
                $('#delete_button').removeClass('disabled')
                  .attr('href', '/cms/'+collectionName+'/'+id)  
                  .attr('title', 'Are You Sure You Want To Delete This Record?')
              }
            }        
            <% able_to? :publish_content do -%>
              if(row.status == "draft" && publishable) {
                $('#publish_button').removeClass('disabled').attr('href', '/cms/'+collectionName+'/'+id+'/publish?_redirect_to='+location.href)        
              } else {
                  $('#unpublish_button').removeClass('disabled').attr('href', '/cms/'+collectionName+'/'+id+'/unpublish?_redirect_to='+location.href)
              }
            <% end %>
			}
			
    })
  <% end %>
<%= stylesheet_link_tag "cms/content_library" %>
<% end %>
<% page_title "Content Library / List #{content_type.display_name_plural}" %>
<% @toolbar_title = "List #{content_type.display_name_plural}" %>
<%= render :partial => 'cms/blocks/toolbar' %>

<div class="roundedcorners">
<div class="slickgrid"></div>
<div class="tl"></div>
<div class="tr"></div>
<div class="bl"></div>
<div class="br"></div>
</div>